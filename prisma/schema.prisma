generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique(map: "email")
  emailVerified DateTime? @db.DateTime(0)
  password      String?
}

model abuse_tracking {
  id          Int                        @id @default(autoincrement())
  user_id     Int
  ip_address  String?                    @db.VarChar(45)
  action_type abuse_tracking_action_type
  description String?                    @db.Text
  severity    abuse_tracking_severity?   @default(medium)
  status      abuse_tracking_status?     @default(active)
  created_at  DateTime?                  @default(now()) @db.Timestamp(0)
  resolved_at DateTime?                  @db.Timestamp(0)

  @@index([action_type], map: "idx_action_type")
  @@index([created_at], map: "idx_created_at")
  @@index([user_id], map: "idx_user_id")
}

model automation_workflows {
  id             Int                               @id @default(autoincrement())
  name           String                            @db.VarChar(255)
  description    String?                           @db.Text
  trigger_type   automation_workflows_trigger_type
  is_active      Boolean?                          @default(true)
  created_at     DateTime?                         @default(now()) @db.Timestamp(0)
  updated_at     DateTime?                         @default(now()) @db.Timestamp(0)
  workflow_logs  workflow_logs[]
  workflow_steps workflow_steps[]
}

model bookings {
  id          Int              @id @default(autoincrement())
  title       String           @db.VarChar(255)
  description String?          @db.Text
  start_time  DateTime         @db.DateTime(0)
  end_time    DateTime         @db.DateTime(0)
  client_id   Int
  status      bookings_status? @default(scheduled)
  location    String?          @db.VarChar(255)
  notes       String?          @db.Text
  created_at  DateTime?        @default(now()) @db.Timestamp(0)
  updated_at  DateTime?        @default(now()) @db.Timestamp(0)
  clients     clients          @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_1")

  @@index([client_id], map: "client_id")
}

model clients {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  email      String     @db.VarChar(255)
  phone      String?    @db.VarChar(50)
  address    String?    @db.Text
  created_at DateTime?  @default(now()) @db.Timestamp(0)
  bookings   bookings[]
  invoices   invoices[]
}

model email_domains {
  id                 Int                   @id @default(autoincrement())
  domain             String                @unique(map: "domain") @db.VarChar(255)
  is_verified        Boolean?              @default(false)
  verification_token String?               @db.VarChar(255)
  dkim_public_key    String?               @db.Text
  dkim_private_key   String?               @db.Text
  spf_record         String?               @db.Text
  dmarc_record       String?               @db.Text
  status             email_domains_status? @default(pending)
  created_by         Int
  created_at         DateTime?             @default(now()) @db.Timestamp(0)
  updated_at         DateTime?             @default(now()) @db.Timestamp(0)
  verified_at        DateTime?             @db.Timestamp(0)

  @@index([domain], map: "idx_domain")
  @@index([status], map: "idx_status")
}

model email_logs {
  id                Int               @id @default(autoincrement())
  email_template_id Int?
  recipient         String            @db.VarChar(255)
  subject           String            @db.VarChar(255)
  body              String            @db.Text
  status            email_logs_status
  error_message     String?           @db.Text
  sent_at           DateTime?         @default(now()) @db.Timestamp(0)
  email_templates   email_templates?  @relation(fields: [email_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "email_logs_ibfk_1")

  @@index([email_template_id], map: "email_template_id")
}

model email_templates {
  id               Int                     @id @default(autoincrement())
  name             String                  @db.VarChar(255)
  subject          String                  @db.VarChar(255)
  body             String                  @db.Text
  type             String                  @db.VarChar(50)
  status           email_templates_status? @default(draft)
  created_at       DateTime?               @default(now()) @db.Timestamp(0)
  updated_at       DateTime?               @default(now()) @db.Timestamp(0)
  email_logs       email_logs[]
  scheduled_emails scheduled_emails[]
}

model enquiries {
  id           Int                 @id @default(autoincrement())
  name         String              @db.VarChar(255)
  email        String              @db.VarChar(255)
  phone        String?             @db.VarChar(50)
  company      String?             @db.VarChar(255)
  subject      String?             @db.VarChar(500)
  message      String              @db.Text
  status       enquiries_status?   @default(new)
  priority     enquiries_priority? @default(medium)
  source       enquiries_source?   @default(website)
  assigned_to  Int?
  responded_at DateTime?           @db.Timestamp(0)
  created_at   DateTime?           @default(now()) @db.Timestamp(0)
  updated_at   DateTime?           @default(now()) @db.Timestamp(0)

  @@index([created_at], map: "idx_created_at")
  @@index([email], map: "idx_email")
  @@index([priority], map: "idx_priority")
  @@index([status], map: "idx_status")
}

model invoice_items {
  id          Int       @id @default(autoincrement())
  invoice_id  Int
  description String    @db.Text
  quantity    Int       @default(1)
  rate        Decimal   @db.Decimal(10, 2)
  amount      Decimal   @db.Decimal(10, 2)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  invoices    invoices  @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "invoice_items_ibfk_1")

  @@index([invoice_id], map: "invoice_id")
}

model invoices {
  id             Int              @id @default(autoincrement())
  invoice_number String           @unique(map: "invoice_number") @db.VarChar(50)
  client_id      Int
  issue_date     DateTime         @db.Date
  due_date       DateTime         @db.Date
  subtotal       Decimal          @default(0.00) @db.Decimal(10, 2)
  tax_rate       Decimal?         @default(0.00) @db.Decimal(5, 2)
  tax_amount     Decimal?         @default(0.00) @db.Decimal(10, 2)
  total          Decimal          @default(0.00) @db.Decimal(10, 2)
  status         invoices_status? @default(draft)
  notes          String?          @db.Text
  created_at     DateTime?        @default(now()) @db.Timestamp(0)
  updated_at     DateTime?        @default(now()) @db.Timestamp(0)
  invoice_items  invoice_items[]
  clients        clients          @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invoices_ibfk_1")

  @@index([client_id], map: "client_id")
}

model payment_transactions {
  id                     Int                                 @id @default(autoincrement())
  user_id                Int
  invoice_id             Int?
  transaction_id         String                              @unique(map: "transaction_id") @db.VarChar(255)
  payment_method         payment_transactions_payment_method
  amount                 Decimal                             @db.Decimal(10, 2)
  currency               String?                             @default("USD") @db.VarChar(3)
  status                 payment_transactions_status?        @default(pending)
  gateway_response       String?                             @db.Text
  gateway_transaction_id String?                             @db.VarChar(255)
  fee_amount             Decimal?                            @default(0.00) @db.Decimal(10, 2)
  net_amount             Decimal                             @db.Decimal(10, 2)
  processed_at           DateTime?                           @db.Timestamp(0)
  created_at             DateTime?                           @default(now()) @db.Timestamp(0)
  updated_at             DateTime?                           @default(now()) @db.Timestamp(0)

  @@index([created_at], map: "idx_created_at")
  @@index([invoice_id], map: "idx_invoice_id")
  @@index([status], map: "idx_status")
  @@index([transaction_id], map: "idx_transaction_id")
  @@index([user_id], map: "idx_user_id")
}

model scheduled_emails {
  id                Int                      @id @default(autoincrement())
  email_template_id Int
  recipient         String                   @db.VarChar(255)
  subject           String                   @db.VarChar(255)
  body              String                   @db.Text
  scheduled_date    DateTime                 @db.DateTime(0)
  status            scheduled_emails_status? @default(scheduled)
  created_at        DateTime?                @default(now()) @db.Timestamp(0)
  updated_at        DateTime?                @default(now()) @db.Timestamp(0)
  email_templates   email_templates          @relation(fields: [email_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "scheduled_emails_ibfk_1")

  @@index([email_template_id], map: "email_template_id")
}

model subscription_limits {
  id                             Int                            @id @default(autoincrement())
  user_id                        Int
  plan_type                      subscription_limits_plan_type? @default(free)
  max_clients                    Int?                           @default(10)
  max_invoices_per_month         Int?                           @default(50)
  max_email_templates            Int?                           @default(5)
  max_scheduled_emails_per_month Int?                           @default(100)
  max_automations                Int?                           @default(3)
  max_storage_mb                 Int?                           @default(100)
  features                       Json?
  is_active                      Boolean?                       @default(true)
  expires_at                     DateTime?                      @db.Timestamp(0)
  created_at                     DateTime?                      @default(now()) @db.Timestamp(0)
  updated_at                     DateTime?                      @default(now()) @db.Timestamp(0)

  @@index([expires_at], map: "idx_expires_at")
  @@index([plan_type], map: "idx_plan_type")
  @@index([user_id], map: "idx_user_id")
}

model user_usage {
  id                    Int       @id @default(autoincrement())
  user_id               Int
  period_start          DateTime  @db.Date
  period_end            DateTime  @db.Date
  clients_created       Int?      @default(0)
  invoices_created      Int?      @default(0)
  emails_sent           Int?      @default(0)
  scheduled_emails_sent Int?      @default(0)
  storage_used_mb       Decimal?  @default(0.00) @db.Decimal(10, 2)
  api_calls_made        Int?      @default(0)
  automations_triggered Int?      @default(0)
  created_at            DateTime? @default(now()) @db.Timestamp(0)
  updated_at            DateTime? @default(now()) @db.Timestamp(0)

  @@unique([user_id, period_start, period_end], map: "unique_user_period")
  @@index([period_start], map: "idx_period_start")
  @@index([user_id], map: "idx_user_id")
}

model workflow_logs {
  id                   Int                  @id @default(autoincrement())
  workflow_id          Int
  step_id              Int?
  action               String               @db.VarChar(50)
  status               workflow_logs_status
  message              String?              @db.Text
  data                 Json?
  created_at           DateTime?            @default(now()) @db.Timestamp(0)
  automation_workflows automation_workflows @relation(fields: [workflow_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "workflow_logs_ibfk_1")
  workflow_steps       workflow_steps?      @relation(fields: [step_id], references: [id], onUpdate: NoAction, map: "workflow_logs_ibfk_2")

  @@index([step_id], map: "step_id")
  @@index([workflow_id], map: "workflow_id")
}

model workflow_steps {
  id                   Int                        @id @default(autoincrement())
  workflow_id          Int
  step_order           Int
  action_type          workflow_steps_action_type
  action_data          Json
  status               workflow_steps_status?     @default(pending)
  execution_time       DateTime?                  @db.Timestamp(0)
  created_at           DateTime?                  @default(now()) @db.Timestamp(0)
  updated_at           DateTime?                  @default(now()) @db.Timestamp(0)
  workflow_logs        workflow_logs[]
  automation_workflows automation_workflows       @relation(fields: [workflow_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "workflow_steps_ibfk_1")

  @@index([workflow_id], map: "workflow_id")
}

enum subscription_limits_plan_type {
  free
  basic
  pro
  enterprise
}

enum abuse_tracking_action_type {
  failed_login
  spam_email
  rate_limit_exceeded
  suspicious_activity
}

enum automation_workflows_trigger_type {
  invoice_created
  invoice_due
  invoice_overdue
  client_added
}

enum workflow_steps_action_type {
  send_email
  wait
  update_status
  notify
}

enum payment_transactions_payment_method {
  credit_card
  debit_card
  paypal
  bank_transfer
  stripe
  square
  other
}

enum workflow_logs_status {
  success
  failure
  info
}

enum abuse_tracking_severity {
  low
  medium
  high
  critical
}

enum email_logs_status {
  sent
  failed
  opened
  clicked
}

enum email_templates_status {
  draft
  active
}

enum workflow_steps_status {
  pending
  completed
  failed
  in_progress
}

enum abuse_tracking_status {
  active
  resolved
  investigating
}

enum bookings_status {
  scheduled
  confirmed
  cancelled
  completed
}

enum scheduled_emails_status {
  scheduled
  sent
  failed
}

enum enquiries_status {
  new
  in_progress
  responded
  closed
}

enum payment_transactions_status {
  pending
  processing
  completed
  failed
  cancelled
  refunded
  partially_refunded
}

enum email_domains_status {
  pending
  verified
  failed
  disabled
}

enum enquiries_priority {
  low
  medium
  high
  urgent
}

enum enquiries_source {
  website
  email
  phone
  referral
  social_media
  other
}

enum invoices_status {
  draft
  sent
  viewed
  paid
  overdue
}
